# AUTOGENERATED! DO NOT EDIT! File to edit: image-opencv_tools.ipynb (unless otherwise specified).

__all__ = ['limit_to_max_size', 'fit_to_max_size', 'load_image', 'load_from_base64', 'get_image_size',
           'from_pillow_image', 'convert_to_base64']


# Cell
import cv2
import base64
import numpy as np


# Cell
def limit_to_max_size(img, max_size):
    """
    Limit the image size to max size and scale the image,
    if max size exceeded.
    `img`: The image to validate as OpenCV image.
    `max_size`: The max allowed image size.
    :return: The eventually resized opencv image.
    """
    biggest_size = max(img.shape[:2])
    if max_size and biggest_size > max_size:
        ratio = 1.0 * max_size / biggest_size
        img = cv2.resize(img, (int(ratio * img.shape[1]), int(ratio * img.shape[0])))
    return img


# Cell
def fit_to_max_size(img, max_width, max_height):
    """
    Limit the image size to maximum width and height and scale the image,
    if size exceeded.
    `img`: The image to validate as OpenCV Image.
    `max_width`: The max allowed image width.
    `max_height`: The max allowed image height.
    :return: The eventually resized OpenCV image.
    """
    h, w = img.shape[:2]
    scale_delta = max(w - max_width, h - max_height)
    if scale_delta > 0:
        max_size = max(w - scale_delta, h - scale_delta)
        img = limit_to_max_size(img, max_size)
    return img


# Cell
def load_image(fname):
    """
    Load an image using the OpenCV library
    `fname`: the file path or BytesIO stream
    return: the Pillow image
    """
    return cv2.imread(fname)


# Cell
def load_from_base64(img_b64, img_format=cv2.IMREAD_COLOR):
    """
    Load an image as base64 string using the Pillow library
    `img_b64`: the image as base64 string
    return: the Pillow image
    """
    img_bytes = base64.b64decode(img_b64)  # convert as binary image
    img_arr = np.frombuffer(img_bytes, dtype=np.uint8)  # im_arr is one-dim Numpy array
    return cv2.imdecode(img_arr, flags=img_format)


# Cell
def get_image_size(fname):
    """
    Calculates image size of a given image file.
    `fname`: the file path
    return: the OpenCV image, image width and height
    """
    img = load_image(fname)
    h, w = img.shape[:2]
    return img, w, h


# Cell
def from_pillow_image(img):
    """
    Converts a Pillow image to OpenCV image.
    `img`: the Pillow image
    return: the OpenCV image
    """
    return cv2.cvtColor(np.array(img), cv2.COLOR_RGB2BGR)


# Cell
def convert_to_base64(image, image_type="PNG"):
    """
    Converts the specified image into a base64 version of itself.
    Source code mainly taken from:
    https://jdhao.github.io/2020/03/17/base64_opencv_pil_image_conversion/
    `image`: The image to transform as CV2 Image.
    `image_type`: The image type.
    :return: The base64 encoded version of the image.
    """
    _, img_arr = cv2.imencode(f'.{image_type.lower()}', image)  # im_arr: image in Numpy one-dim array format.
    img_bytes = img_arr.tobytes()
    return base64.b64encode(img_bytes)