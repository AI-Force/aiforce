# AUTOGENERATED BY NBDEV! DO NOT EDIT!

__all__ = ["index", "modules", "custom_doc_links", "git_url"]

index = {"RegionShape": "annotation-core.ipynb",
         "parse_region_shape": "annotation-core.ipynb",
         "Region": "annotation-core.ipynb",
         "Annotation": "annotation-core.ipynb",
         "create_annotation_id": "annotation-core.ipynb",
         "convert_region": "annotation-core.ipynb",
         "region_bounding_box": "annotation-core.ipynb",
         "DEFAULT_CATEGORY_FOLDER_INDEX": "annotation-folder_category_adapter.ipynb",
         "logger": "tools-image_size_calculator.ipynb",
         "read_annotations": "annotation-via_adapter.ipynb",
         "write_annotations": "annotation-via_adapter.ipynb",
         "configure_logging": "tools-image_size_calculator.ipynb",
         "DEFAULT_ANNOTATIONS_FILE": "annotation-via_adapter.ipynb",
         "DEFAULT_CATEGORY_ID": "annotation-via_adapter.ipynb",
         "show_annotated_images": "annotation-viewer.ipynb",
         "DEFAULT_CATEGORIES_FILE": "dataset.ipynb",
         "NOT_CATEGORIZED": "dataset.ipynb",
         "BACKGROUND_CLASS": "category_tools.ipynb",
         "BACKGROUND_CLASS_CODE": "category_tools.ipynb",
         "read_categories": "category_tools.ipynb",
         "Type": "core.ipynb",
         "infer_type": "core.ipynb",
         "CATEGORY_LABEL_KEY": "dataset.ipynb",
         "DEFAULT_CLASSIFICATION_ANNOTATIONS_FILE": "dataset.ipynb",
         "DEFAULT_SEGMENTATION_ANNOTATIONS_FILE": "dataset.ipynb",
         "DEFAULT_SPLIT": "dataset.ipynb",
         "DATA_SET_FOLDER": "dataset.ipynb",
         "SEMANTIC_MASK_FOLDER": "dataset.ipynb",
         "TRAIN_VAL_FOLDER": "dataset.ipynb",
         "TRAIN_FOLDER": "dataset.ipynb",
         "VAL_FOLDER": "dataset.ipynb",
         "TEST_FOLDER": "dataset.ipynb",
         "DataSet": "dataset.ipynb",
         "ClassificationDataSet": "dataset.ipynb",
         "ObjectDetectionDataSet": "dataset.ipynb",
         "SegmentationDataSet": "dataset.ipynb",
         "split_train_val_data": "dataset.ipynb",
         "copy_image_and_assign_orientation": "dataset.ipynb",
         "input_feedback": "dataset.ipynb",
         "build_data_set": "dataset.ipynb",
         "box_area": "evaluation-core.ipynb",
         "intersection_box": "evaluation-core.ipynb",
         "union_box": "evaluation-core.ipynb",
         "intersection_over_union": "evaluation-core.ipynb",
         "create_ellipse": "geometry.ipynb",
         "ellipse_intersection_area": "geometry.ipynb",
         "pascal_voc_palette": "image-color_palette.ipynb",
         "ade20k_palette": "image-color_palette.ipynb",
         "cityscapes_palette": "image-color_palette.ipynb",
         "mhp_palette_v1": "image-color_palette.ipynb",
         "setup_learner": "image-inference.ipynb",
         "fix_odd_sides": "image-inference.ipynb",
         "Inference": "image-inference.ipynb",
         "ClassificationInference": "image-inference.ipynb",
         "SegmentationInference": "image-inference.ipynb",
         "limit_to_max_size": "image-pillow_tools.ipynb",
         "fit_to_max_size": "image-pillow_tools.ipynb",
         "get_image_size": "image-pillow_tools.ipynb",
         "EXIF_ORIENTATION_TAG": "image-pillow_tools.ipynb",
         "get_image_orientation": "image-pillow_tools.ipynb",
         "read_exif_metadata": "image-pillow_tools.ipynb",
         "write_exif_metadata": "image-pillow_tools.ipynb",
         "assign_exif_orientation": "image-pillow_tools.ipynb",
         "convert_to_base64": "image-pillow_tools.ipynb",
         "write_mask": "image-pillow_tools.ipynb",
         "ImageOrientation": "image-tools.ipynb",
         "get_image_scale": "image-tools.ipynb",
         "BUF_SIZE": "tools-check_double_images.ipynb",
         "DEFAULT_IMAGE_EXTENSIONS": "io-core.ipynb",
         "FOLDER_FILTER": "io-core.ipynb",
         "scan_files": "io-core.ipynb",
         "scan_path": "io-core.ipynb",
         "delete_folder": "io-core.ipynb",
         "create_folder": "io-core.ipynb",
         "get_file_sha": "tools-check_double_images.ipynb",
         "TFLITE_MODEL_DEFAULT_NAME": "tensorflow-tflite_converter.ipynb",
         "convert_model": "tensorflow-tflite_converter.ipynb",
         "save_model": "tensorflow-tflite_converter.ipynb",
         "read_pipeline_config": "tensorflow-tflite_converter.ipynb",
         "SAVED_MODEL_META_DEFAULT_KEY": "tensorflow-tflite_metadata.ipynb",
         "AUTHOR": "tensorflow-tflite_metadata.ipynb",
         "MetaInfo": "tensorflow-tflite_metadata.ipynb",
         "create_metadata": "tensorflow-tflite_metadata.ipynb",
         "write_metadata": "tensorflow-tflite_metadata.ipynb",
         "read_metadata": "tensorflow-tflite_metadata.ipynb",
         "create_tfrecord_entry": "tensorflow-tfrecord_builder.ipynb",
         "create_tfrecord_file": "tensorflow-tfrecord_builder.ipynb",
         "int64_feature": "tensorflow-tfrecord_builder.ipynb",
         "int64_list_feature": "tensorflow-tfrecord_builder.ipynb",
         "bytes_feature": "tensorflow-tfrecord_builder.ipynb",
         "bytes_list_feature": "tensorflow-tfrecord_builder.ipynb",
         "float_list_feature": "tensorflow-tfrecord_builder.ipynb",
         "create_labelmap_file": "tensorflow-tfrecord_builder.ipynb",
         "FILE_FILTER": "tools-check_double_images.ipynb",
         "IMAGE_EXTENSION": "tools-check_double_images.ipynb",
         "DoubleFileChecker": "tools-check_double_images.ipynb",
         "check_double_entries": "tools-check_double_images.ipynb",
         "remove_entries": "tools-check_double_images.ipynb",
         "scan_folder": "tools-check_double_images.ipynb",
         "Downloader": "tools-downloader.ipynb",
         "SaveToDirectory": "tools-downloader.ipynb",
         "ImageSizeCalculator": "tools-image_size_calculator.ipynb"}

modules = ["annotation/core.py",
           "annotation/folder_category_adapter.py",
           "annotation/multi_category_adapter.py",
           "annotation/via_adapter.py",
           "annotation/viewer.py",
           "category_tools.py",
           "core.py",
           "dataset.py",
           "evaluation/core.py",
           "geometry.py",
           "image/color_palette.py",
           "image/inference.py",
           "image/opencv_tools.py",
           "image/pillow_tools.py",
           "image/tools.py",
           "io/core.py",
           "tensorflow/tflite_converter.py",
           "tensorflow/tflite_metadata.py",
           "tensorflow/tfrecord_builder.py",
           "tools/check_double_images.py",
           "tools/downloader.py",
           "tools/image_size_calculator.py"]

doc_url = "https://ai-force.github.io/ML-Core-Docs/"

git_url = "https://github.com/ai-force/ML-Core/tree/master/"

def custom_doc_links(name): return None
