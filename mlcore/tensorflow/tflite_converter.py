# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/tensorflow-tflite_converter.ipynb (unless otherwise specified).

__all__ = ['logger', 'convert_model', 'save_model', 'configure_logging']

# Cell

import logging
import logging.handlers
import argparse
import sys
import tensorflow as tf
from os.path import join

# Cell

logger = logging.getLogger(__name__)

# Cell


def convert_model(saved_model_dir):
    """
    Convert a SavedModel into Tensorflow Lite Format.
    `saved_model_dir`: the path to the SavedModel directory
    returns: the converted Tensorflow Lite model
    """
    logger.info('Converting SavedModel from: {}'.format(saved_model_dir))
    converter = tf.lite.TFLiteConverter.from_saved_model(saved_model_dir)  # path to the SavedModel directory
    tflite_model = converter.convert()
    return tflite_model

# Cell


def save_model(tflite_model, output_path):
    """
    Save a Tensowflow Lite model to disk.
    `tflite_model`: the Tensorflow Lite model
    `output_path`: the folder to save the Tensorflow Lite model
    """
    output_file = join(output_path, 'model.tflite')
    with open(output_file, 'wb') as f:
        f.write(tflite_model)
    logger.info('Successfully save model to file: {}'.format(output_file))

# Cell


def configure_logging(logging_level=logging.INFO):
    """
    Configures logging for the system.

    :param logging_level: The logging level to use.
    """
    logger.setLevel(logging_level)

    handler = logging.StreamHandler(sys.stdout)
    handler.setLevel(logging_level)

    logger.addHandler(handler)

# Cell


if __name__ == '__main__' and '__file__' in globals():
    configure_logging()

    parser = argparse.ArgumentParser()
    parser.add_argument("-s",
                        "--source",
                        help="The path to the folder containing the SavedModel.",
                        type=str)
    parser.add_argument("-o",
                        "--output",
                        help="The folder to store the Tensorflow Lite model.",
                        type=str)
    args = parser.parse_args()

    save_model(convert_model(args.source), args.output)

    logger.info('FINISHED!!!')
