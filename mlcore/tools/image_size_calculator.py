# AUTOGENERATED! DO NOT EDIT! File to edit: tools-image_size_calculator.ipynb (unless otherwise specified).

__all__ = ['logger', 'FILE_FILTER', 'IMAGE_EXTENSIONS', 'ImageSizeCalculator', 'configure_logging', 'get_image_size',
           'scan_folder']

# Cell

import logging
import argparse
import logging.handlers
import sys
from functools import reduce
from PIL import Image as PILImage
from os import listdir
from os.path import join, isfile, isdir, splitext

# Cell

logger = logging.getLogger(__name__)

# Cell

FILE_FILTER = ['.DS_Store']
IMAGE_EXTENSIONS = ['.jpg']

# Cell


class ImageSizeCalculator:
    """
    Calculates image sizes in a given folder and subfolders. Summarize unique image sizes at the end.
    `path`: the folder to process
    """

    def __init__(self, path):
        self.path = path

    def calculate(self):
        """
        The main logic.
        return: a dictionary with unique sizes as key and image count as value
        """

        images = scan_folder(self.path)
        all_images = len(images)
        unique_sizes = {}

        for index, image in enumerate(images):
            width, height = get_image_size(image)
            size_key = "{}x{}".format(width, height)
            logger.info("{} / {} - Handle Image {} with size {}x{}".format(
                index + 1,
                all_images,
                image,
                width,
                height,
            ))
            if not size_key in unique_sizes:
                unique_sizes[size_key] = 0
            unique_sizes[size_key] += 1

        return unique_sizes

# Cell


def configure_logging(logging_level=logging.INFO):
    """
    Configures logging for the system.

    :param logging_level: The logging level to use.
    """
    logger.setLevel(logging_level)

    handler = logging.StreamHandler(sys.stdout)
    handler.setLevel(logging_level)

    logger.addHandler(handler)

# Cell


def get_image_size(fname):
    """
    Calculates image size of a given image file.
    `fname`: the file path
    return: the image width and height
    """
    img = PILImage.open(fname)
    w, h = img.size
    return w, h

# Cell


def scan_folder(folder):
    """
    Scans a folder and subfolders for image content.
    `folder`: the folder to scan
    returns: a list of paths to images found
    """
    images = []

    contents = listdir(folder)
    for content in contents:
        if content in FILE_FILTER:
            continue
        path = join(folder, content)
        if isdir(path):
            result = scan_folder(path)
            for entry in result:
                images.append(entry)
        elif isfile(path):
            if not splitext(content)[1] in IMAGE_EXTENSIONS:
                continue
            images.append(path)
    return images

# Cell


if __name__ == '__main__' and '__file__' in globals():
    configure_logging()

    parser = argparse.ArgumentParser()
    parser.add_argument("folder", help="The folder to scan.")
    args = parser.parse_args()

    calculator = ImageSizeCalculator(args.folder)
    sizes = calculator.calculate()
    image_count = reduce(lambda a, x: a + x, sizes.values())
    logger.info("Images Analyzed: {}".format(image_count))

    logger.info("Unique Image Sizes and Image Count:")
    for key, size in sizes.items():
        logger.info("{}: {}".format(key, size))

    print('FINISHED!!!')
