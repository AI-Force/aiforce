# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/annotation_converter.ipynb (unless otherwise specified).

__all__ = ['convert', 'configure_logging']

# Cell

import sys
import argparse
import logging
from .core import import_modules, parse_known_help
from mlcore import annotation as annotation_package
from .annotation.core import AnnotationAdapter

# Cell


def convert(input_annotation_adapter: AnnotationAdapter, output_annotation_adapter: AnnotationAdapter):
    """
    Convert input annotations to output annotations.
    `input_annotation_adapter`: the input annotation adapter
    `output_annotation_adapter`: the output annotation adapter
    """
    annotations = input_annotation_adapter.read()
    output_annotation_adapter.write(annotations)

# Cell


def configure_logging(logging_level=logging.INFO):
    """
    Configures logging for the system.

    :param logging_level: The logging level to use.
    """
    logging.basicConfig(level=logging_level)

# Cell


if __name__ == '__main__' and '__file__' in globals():
    # for direct shell execution
    configure_logging()

    # read annotation adapters to use
    import_modules(annotation_package)
    adapter_classes = AnnotationAdapter.__subclasses__()
    adapters = dict(zip(map(lambda c: c.__name__, adapter_classes), adapter_classes))

    parser = argparse.ArgumentParser()
    parser.add_argument("-i",
                        "--input",
                        help="The annotation input adapter.",
                        type=str,
                        choices=adapters.keys(),
                        required=True)
    parser.add_argument("-o",
                        "--output",
                        help="The annotation output adapter.",
                        type=str,
                        choices=adapters.keys(),
                        required=True)

    argv = sys.argv
    argv, argv_help_rest = parse_known_help(argv)
    args, rest_args = parser.parse_known_args(argv)
    argv = rest_args + argv_help_rest
    input_adapter_class = adapters[args.input]
    output_adapter_class = adapters[args.output]

    # parse the input arguments
    input_parser = getattr(input_adapter_class, 'argparse')(prefix='input')
    argv, argv_help_rest = parse_known_help(argv)
    input_args, rest_args = input_parser.parse_known_args(argv)
    argv = rest_args + argv_help_rest

    # parse the output arguments
    output_parser = getattr(output_adapter_class, 'argparse')(prefix='output')
    argv, argv_help_rest = parse_known_help(argv)
    output_args, rest_args = output_parser.parse_known_args(argv)
    argv = rest_args + argv_help_rest

    input_adapter = input_adapter_class(input_args)
    output_adapter = output_adapter_class(output_args)

    convert(input_adapter, output_adapter)
