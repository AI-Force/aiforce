# AUTOGENERATED! DO NOT EDIT! File to edit: image-image_tools.ipynb (unless otherwise specified).

__all__ = ['overlay_image', 'limit_to_max_size', 'get_image_size', 'convert_to_base64']

# Cell
import base64
from io import BytesIO
from PIL import Image as PILImage

# Cell


def overlay_image(image_original, image_annotation, transparency=0.3):
    """
    Creates an overlay image as Pillow Image.

    `image_original`: The base image as Pillow Image.
    `image_annotation`: The image to overlay as Pillow Image.
    `transparency`: The amount of transparency to assign to the overlay image.

    return: The overlay image as Pillow Image.
    """
    image_annotation = image_annotation.convert("RGBA")

    pixdata = image_annotation.load()

    width, height = image_annotation.size
    # make 70% transparency of the annotation
    alpha = 255 - int(255 * transparency)
    image_annotation.putalpha(alpha)
    # make background transparent
    for y in range(height):
        for x in range(width):
            if pixdata[x, y] == (0, 0, 0, alpha):
                pixdata[x, y] = (0, 0, 0, 0)
    overlay = image_original.convert("RGBA")
    overlay.paste(image_annotation, (0, 0), image_annotation)
    return overlay

# Cell


def limit_to_max_size(img, max_size):
    """
    Limit the image size to max size and scale the image,
    if max size exceeded.
    `img`: The image to validate as Pillow Image.
    `max_size`: The max allowed image size.
    :return: The eventually resized image.
    """
    biggest_size = max(img.size)
    if max_size and biggest_size > max_size:
        ratio = 1.0 * max_size / biggest_size
        img = img.resize([int(ratio * s) for s in img.size])
    return img

# Cell


def get_image_size(fname):
    """
    Calculates image size of a given image file.
    `fname`: the file path
    return: the image width and height
    """
    img = PILImage.open(fname)
    w, h = img.size
    return w, h

# Cell


def convert_to_base64(image, image_type="PNG"):
    """
    Converts the specified image into a base64 version of itself.

    `image`: The image to transform as Pillow Image.
    `image_type`: The image type.
    :return: The base64 encoded version of the image.
    """
    buffered = BytesIO()
    image.save(buffered, format=image_type)
    return base64.b64encode(buffered.getvalue()).decode('UTF-8')
