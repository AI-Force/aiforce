# AUTOGENERATED! DO NOT EDIT! File to edit: via-converter.ipynb (unless otherwise specified).

__all__ = ['DEFAULT_ANNOTATIONS_FILE', 'logger', 'read_annotations', 'region_rect_to_polygon', 'region_polygon_to_rect',
           'configure_logging']

# Cell

import json
import sys
import argparse
import logging

# Cell

DEFAULT_ANNOTATIONS_FILE = 'via_region_data.json'

# Cell

logger = logging.getLogger(__name__)

# Cell


def read_annotations(annotations_file):
    """
    Reads an VIA annotation file
    `annotations_file`: the path to the annotation file to read
    return: the annotations
    """
    with open(annotations_file) as json_file:
        annotations = json.load(json_file)
        logger.info('Found {} annotations at {}'.format(len(annotations), annotations_file))

    return annotations

# Cell


def region_rect_to_polygon(region):
    shape_attributes = region['shape_attributes']
    shape_type = shape_attributes['name']
    if shape_type == 'rect':
        x = shape_attributes["x"]
        y = shape_attributes["y"]
        max_x = x + shape_attributes["width"]
        max_y = y + shape_attributes["height"]
        shape_attributes = {
            "name": "polygon",
            "all_points_x": [x, x, max_x, max_x, x],
            "all_points_y": [y, max_y, max_y, y, y],
        }
        region['shape_attributes'] = shape_attributes
    return region

# Cell


def region_polygon_to_rect(region):
    shape_attributes = region['shape_attributes']
    shape_type = shape_attributes['name']
    if shape_type == 'polygon':
        x_min = min(shape_attributes['all_points_x'])
        x_max = max(shape_attributes['all_points_x'])
        y_min = min(shape_attributes['all_points_y'])
        y_max = max(shape_attributes['all_points_y'])
        shape_attributes = {
            "name": "rect",
            "x": x_min,
            "y": y_min,
            "width": x_max - x_min,
            "height": y_max - y_min,
        }
        region['shape_attributes'] = shape_attributes
    return region

# Cell


def configure_logging(logging_level=logging.INFO):
    """
    Configures logging for the system.

    :param logging_level: The logging level to use.
    """
    logger.setLevel(logging_level)

    handler = logging.StreamHandler(sys.stdout)
    handler.setLevel(logging_level)

    logger.addHandler(handler)

# Cell


if __name__ == '__main__' and '__file__' in globals():
    # for direct shell execution
    parser = argparse.ArgumentParser()
    parser.add_argument("annotation",
                        help="The path to the VIA annotation file.")

    args = parser.parse_args()

    read_annotations(args.annotation)
