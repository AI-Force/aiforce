# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/category_tools.ipynb (unless otherwise specified).

__all__ = ['DEFAULT_CATEGORIES_FILE', 'NOT_CATEGORIZED', 'BACKGROUND_CLASS', 'BACKGROUND_CLASS_CODE', 'logger',
           'read_categories', 'configure_logging']

# Cell

import sys
import argparse
import logging
from .core import Type

# Cell

DEFAULT_CATEGORIES_FILE = 'categories.txt'
NOT_CATEGORIZED = '[NOT_CATEGORIZED]'
BACKGROUND_CLASS = '_background_'
BACKGROUND_CLASS_CODE = 0

# Cell

logger = logging.getLogger(__name__)

# Cell


def read_categories(categories_file=None, data_set_type=Type.IMAGE_CLASSIFICATION):
    """
    Reads the categories from a categories file.
    If the data-set type is image segmentation or object detection, a background class at index 0 is prepend.
    If the optional `categories_file` is not given, the file name *categories.txt* is used by default
    `categories_file`: the categories file name, if not the default
    `data_set_type`: the type of the data-set to create the categories for
    return: a list of the category names
    """
    if categories_file is None:
        categories_file = DEFAULT_CATEGORIES_FILE

    with open(categories_file) as f:
        categories = f.read().strip().split('\n')
    if data_set_type in [Type.IMAGE_OBJECT_DETECTION, Type.IMAGE_SEGMENTATION]:
        categories = [BACKGROUND_CLASS] + categories
    return categories

# Cell


def configure_logging(logging_level=logging.INFO):
    """
    Configures logging for the system.

    :param logging_level: The logging level to use.
    """
    logger.setLevel(logging_level)

    handler = logging.StreamHandler(sys.stdout)
    handler.setLevel(logging_level)

    logger.addHandler(handler)

# Cell


if __name__ == '__main__' and '__file__' in globals():
    # for direct shell execution
    configure_logging()

    parser = argparse.ArgumentParser()
    parser.add_argument("categories",
                        help="The path to the categories file.")

    args = parser.parse_args()

    categories = read_categories(args.categories)
    print(categories)
