# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/annotation-multi_category_adapter.ipynb (unless otherwise specified).

__all__ = ['DEFAULT_ANNOTATIONS_FILE', 'logger', 'read_annotations', 'write_annotations', 'configure_logging']

# Cell

import csv
import sys
import argparse
import logging
from os.path import join, basename
from .core import Annotation, Region, create_annotation_id

# Cell

DEFAULT_ANNOTATIONS_FILE = 'annotations.csv'

# Cell

logger = logging.getLogger(__name__)

# Cell


def read_annotations(annotations_file, files_source):
    """
    Reads a multi classification CSV annotations file.
    `annotations_file`: the path to the CSV annotation file to read
    `files_source`: the path to the folder containing the source files
    return: the annotations as dictionary
    """
    annotations = {}

    with open(annotations_file, newline='') as csvfile:
        reader = csv.DictReader(csvfile)

        for row in reader:
            file_path = join(files_source, row['image_name'])
            annotation_id = create_annotation_id(file_path)
            if annotation_id is None:
                logger.warning('File not found, skip annotations at path: {}'.format(file_path))
                continue

            if annotation_id not in annotations:
                annotations[annotation_id] = Annotation(annotation_id=annotation_id, file_path=file_path)

            annotation = annotations[annotation_id]

            tags = row['tags'] if 'tags' in row else []
            for category in tags.split(' '):
                region = Region(labels=[category])
                annotation.regions.append(region)

    return annotations

# Cell


def write_annotations(annotations_file, annotations):
    """
    Reads a multi classification CSV annotations file.
    `annotations_file`: the path to the CSV annotation file to write
    `annotations`: the annotations to write
    """
    with open(annotations_file, 'w', newline='') as csvfile:
        fieldnames = ['image_name', 'tags']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL)
        writer.writeheader()
        for annotation in annotations.values():
            writer.writerow({'image_name': basename(annotation.file_path),
                             'tags': ' '.join(annotation.labels())})

# Cell


def configure_logging(logging_level=logging.INFO):
    """
    Configures logging for the system.

    :param logging_level: The logging level to use.
    """
    logger.setLevel(logging_level)

    handler = logging.StreamHandler(sys.stdout)
    handler.setLevel(logging_level)

    logger.addHandler(handler)

# Cell


if __name__ == '__main__' and '__file__' in globals():
    # for direct shell execution
    configure_logging()

    parser = argparse.ArgumentParser()
    parser.add_argument("annotation",
                        help="The path to the multi classification CSV annotation file.")
    parser.add_argument("--files_source",
                        help="The path to the folder containing the source files.")
    args = parser.parse_args()

    read_annotations(args.annotation, args.files_source)
